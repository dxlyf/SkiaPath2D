export type SkScalar = number;
declare const SK_Scalar1: SkScalar;
declare const SK_ScalarHalf: SkScalar;
declare const SK_ScalarSqrt2: SkScalar;
declare const SK_ScalarPI: SkScalar;
declare const SK_ScalarTanPIOver8: SkScalar;
declare const SK_ScalarRoot2Over2: SkScalar;
declare const SK_ScalarMax: SkScalar;
declare const SK_ScalarMin: SkScalar;
declare const SK_ScalarInfinity: SkScalar;
declare const SK_ScalarNegativeInfinity: SkScalar;
declare const SK_ScalarNaN: SkScalar;
declare const SkIntToScalar: (x: number) => SkScalar;
declare const SkIntToFloat: (x: number) => number;
declare const SkScalarToFloat: (x: SkScalar) => number;
declare const SkFloatToScalar: (x: number) => SkScalar;
declare const SkScalarToDouble: (x: SkScalar) => number;
declare const SkDoubleToScalar: (x: number) => SkScalar;
declare const SkScalarFloorToScalar: (x: SkScalar) => SkScalar;
declare const SkScalarCeilToScalar: (x: SkScalar) => SkScalar;
declare const SkScalarRoundToScalar: (x: SkScalar) => SkScalar;
declare const SkScalarTruncToScalar: (x: SkScalar) => SkScalar;
declare const SkScalarFloorToInt: (x: SkScalar) => number;
declare const SkScalarCeilToInt: (x: SkScalar) => number;
declare const SkScalarRoundToInt: (x: SkScalar) => number;
declare const SkScalarAbs: (x: SkScalar) => SkScalar;
declare const SkScalarCopySign: (x: SkScalar, y: SkScalar) => SkScalar;
declare const SkScalarMod: (x: SkScalar, y: SkScalar) => SkScalar;
declare const SkScalarSqrt: (x: SkScalar) => SkScalar;
declare const SkScalarPow: (b: SkScalar, e: SkScalar) => SkScalar;
declare const SkScalarSin: (radians: SkScalar) => number;
declare const SkScalarCos: (radians: SkScalar) => number;
declare const SkScalarTan: (radians: SkScalar) => number;
declare const SkScalarASin: (val: SkScalar) => number;
declare const SkScalarACos: (val: SkScalar) => number;
declare const SkScalarATan2: (y: SkScalar, x: SkScalar) => number;
declare const SkScalarExp: (x: SkScalar) => number;
declare const SkScalarLog: (x: SkScalar) => number;
declare const SkScalarLog2: (x: SkScalar) => number;
declare const SkScalarIsNaN: (x: SkScalar) => boolean;
declare const SkScalarIsFinite: (x: SkScalar) => boolean;
declare const SkScalarsAreFinite: (a: SkScalar, b: SkScalar) => boolean;
declare const SkScalarsAreFiniteArray: (array: SkScalar[], count: number) => boolean;
declare const SkScalarFraction: (x: SkScalar) => SkScalar;
declare const SkScalarSquare: (x: SkScalar) => SkScalar;
declare const SkScalarInvert: (x: SkScalar) => SkScalar;
declare const SkScalarAve: (a: SkScalar, b: SkScalar) => SkScalar;
declare const SkScalarHalf: (a: SkScalar) => SkScalar;
declare const SkDegreesToRadians: (degrees: SkScalar) => SkScalar;
declare const SkRadiansToDegrees: (radians: SkScalar) => SkScalar;
declare const SkScalarIsInt: (x: SkScalar) => boolean;
declare const SkScalarSignAsInt: (x: SkScalar) => number;
declare const SkScalarSignAsScalar: (x: SkScalar) => SkScalar;
declare const SK_ScalarNearlyZero: SkScalar;
declare const SkScalarNearlyZeroCheck: (x: SkScalar, tolerance?: SkScalar) => boolean;
declare const SkScalarNearlyEqual: (x: SkScalar, y: SkScalar, tolerance?: SkScalar) => boolean;
declare const SK_ScalarSinCosNearlyZero: SkScalar;
declare const SkScalarSinSnapToZero: (radians: SkScalar) => number;
declare const SkScalarCosSnapToZero: (radians: SkScalar) => number;
declare const SkScalarInterp: (A: SkScalar, B: SkScalar, t: SkScalar) => SkScalar;
declare const SkScalarInterpFunc: (searchKey: SkScalar, keys: SkScalar[], values: SkScalar[], length: number) => SkScalar;
declare const SkScalarsEqual: (a: SkScalar[], b: SkScalar[], n: number) => boolean;
export { SK_Scalar1, SK_ScalarHalf, SK_ScalarSqrt2, SK_ScalarPI, SK_ScalarTanPIOver8, SK_ScalarRoot2Over2, SK_ScalarMax, SK_ScalarMin, SK_ScalarInfinity, SK_ScalarNegativeInfinity, SK_ScalarNaN, SkIntToScalar, SkIntToFloat, SkScalarToFloat, SkFloatToScalar, SkScalarToDouble, SkDoubleToScalar, SkScalarFloorToScalar, SkScalarCeilToScalar, SkScalarRoundToScalar, SkScalarTruncToScalar, SkScalarFloorToInt, SkScalarCeilToInt, SkScalarRoundToInt, SkScalarAbs, SkScalarCopySign, SkScalarMod, SkScalarSqrt, SkScalarPow, SkScalarSin, SkScalarCos, SkScalarTan, SkScalarASin, SkScalarACos, SkScalarATan2, SkScalarExp, SkScalarLog, SkScalarLog2, SkScalarIsNaN, SkScalarIsFinite, SkScalarsAreFinite, SkScalarsAreFiniteArray, SkScalarFraction, SkScalarSquare, SkScalarInvert, SkScalarAve, SkScalarHalf, SkDegreesToRadians, SkRadiansToDegrees, SkScalarIsInt, SkScalarSignAsInt, SkScalarSignAsScalar, SK_ScalarNearlyZero, SkScalarNearlyZeroCheck as SkScalarNearlyZero, SkScalarNearlyEqual, SK_ScalarSinCosNearlyZero, SkScalarSinSnapToZero, SkScalarCosSnapToZero, SkScalarInterp, SkScalarInterpFunc, SkScalarsEqual };
